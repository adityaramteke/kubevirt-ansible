Name:               sync-fm7f4
Namespace:          openshift-node
Priority:           2000001000
PriorityClassName:  system-node-critical
Node:               cnv-executor-aditya-node2.example.com/172.16.0.14
Start Time:         Fri, 09 Nov 2018 12:52:38 +0530
Labels:             app=sync
                    component=network
                    controller-revision-hash=290813807
                    openshift.io/component=sync
                    pod-template-generation=2
                    type=infra
Annotations:        scheduler.alpha.kubernetes.io/critical-pod=
Status:             Running
IP:                 172.16.0.14
Controlled By:      DaemonSet/sync
Containers:
  sync:
    Container ID:  cri-o://79529904d7b520c34edd885ca203e8627e0003a17adb2ab086c38a3adec32e55
    Image:         brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/openshift3/ose-node:v3.11.16
    Image ID:      brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/openshift3/ose-node@sha256:41c9a18ae3d6c92ad687d34ea5ea08c41461bc33cf40e564cef8ba7fb5d35d8d
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/bash
      -c
      #!/bin/bash
set -euo pipefail

# set by the node image
unset KUBECONFIG

trap 'kill $(jobs -p); exit 0' TERM

# track the current state of the config
if [[ -f /etc/origin/node/node-config.yaml ]]; then
  md5sum /etc/origin/node/node-config.yaml > /tmp/.old
else
  touch /tmp/.old
fi

# loop until BOOTSTRAP_CONFIG_NAME is set
while true; do
  file=/etc/sysconfig/origin-node
  if [[ -f /etc/sysconfig/atomic-openshift-node ]]; then
    file=/etc/sysconfig/atomic-openshift-node
  elif [[ -f /etc/sysconfig/origin-node ]]; then
    file=/etc/sysconfig/origin-node
  else
    echo "info: Waiting for the node sysconfig file to be created" 2>&1
    sleep 15 & wait
    continue
  fi
  name="$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\1|p' "${file}" | head -1)"
  if [[ -z "${name}" ]]; then
    echo "info: Waiting for BOOTSTRAP_CONFIG_NAME to be set" 2>&1
    sleep 15 & wait
    continue
  fi
  # in the background check to see if the value changes and exit if so
  pid=$BASHPID
  (
    while true; do
      if ! updated="$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\1|p' "${file}" | head -1)"; then
        echo "error: Unable to check for bootstrap config, exiting" 2>&1
        kill $pid
        exit 1
      fi
      if [[ "${updated}" != "${name}" ]]; then
        echo "info: Bootstrap configuration profile name changed, exiting" 2>&1
        kill $pid
        exit 0
      fi
      sleep 15
    done
  ) &
  break
done

# periodically refresh both node-config.yaml and relabel the node
while true; do
  if ! oc extract "configmaps/${name}" -n openshift-node --to=/etc/origin/node --confirm --request-timeout=10s --config /etc/origin/node/node.kubeconfig "--token=$( cat /var/run/secrets/kubernetes.io/serviceaccount/token )"  > /dev/null; then
    echo "error: Unable to retrieve latest config for node" 2>&1
    sleep 15 &
    wait $!
    continue
  fi
  # detect whether the node-config.yaml has changed, and if so trigger a restart of the kubelet.
  md5sum /etc/origin/node/node-config.yaml > /tmp/.new
  if [[ "$( cat /tmp/.old )" != "$( cat /tmp/.new )" ]]; then
    echo "info: Configuration changed, restarting kubelet" 2>&1
    # TODO: kubelet doesn't relabel nodes, best effort for now
    # https://github.com/kubernetes/kubernetes/issues/59314
    if args="$(openshift-node-config --config /etc/origin/node/node-config.yaml)"; then
      labels=$(tr ' ' '\n' <<<$args | sed -ne '/^--node-labels=/ { s/^--node-labels=//; p; }' | tr ',\n' ' ')
      if [[ -n "${labels}" ]]; then
        echo "info: Applying node labels $labels" 2>&1
        if ! oc label --config=/etc/origin/node/node.kubeconfig "node/${NODE_NAME}" ${labels} --overwrite; then
          echo "error: Unable to apply labels, will retry in 10" 2>&1
          sleep 10 &
          wait $!
          continue
        fi
      fi
    else
      echo "error: The downloaded node configuration is invalid, retrying later" 2>&1
      sleep 10 &
      wait $!
      continue
    fi
    if ! pkill -U 0 -f '(^|/)hyperkube kubelet '; then
      echo "error: Unable to restart Kubelet" 2>&1
      sleep 10 &
      wait $!
      continue
    fi
  fi
  # annotate node with md5sum of the config
  oc annotate --config=/etc/origin/node/node.kubeconfig "node/${NODE_NAME}" \
    node.openshift.io/md5sum="$( cat /tmp/.new | cut -d' ' -f1 )" --overwrite
  cp -f /tmp/.new /tmp/.old
  sleep 180 &
  wait $!
done

    State:          Running
      Started:      Sun, 11 Nov 2018 04:09:42 +0530
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Sat, 10 Nov 2018 22:23:42 +0530
      Finished:     Sun, 11 Nov 2018 04:09:41 +0530
    Ready:          True
    Restart Count:  2
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /etc/origin/node/ from host-config (rw)
      /etc/sysconfig from host-sysconfig-node (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from sync-token-fm6tr (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  host-config:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/origin/node
    HostPathType:  
  host-sysconfig-node:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/sysconfig
    HostPathType:  
  sync-token-fm6tr:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  sync-token-fm6tr
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/disk-pressure:NoSchedule
                 node.kubernetes.io/memory-pressure:NoSchedule
                 node.kubernetes.io/not-ready:NoExecute
                 node.kubernetes.io/unreachable:NoExecute
Events:          <none>
